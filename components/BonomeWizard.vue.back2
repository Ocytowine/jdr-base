<template>
  <div>
    <!-- Barre d'√©tapes -->
    <div class="ligne" style="justify-content: space-between; margin-bottom:10px;">
      <div class="badge">√âtape {{ etape }} / 5</div>
      <div class="ligne" style="gap:8px;">
        <button class="btn ghost" @click="precedent" :disabled="etape===1">‚Üê Pr√©c√©dent</button>
        <button class="btn" @click="suivant" v-if="etape<5">Suivant ‚Üí</button>
        <button class="btn" v-else @click="sauvegarder">Enregistrer le PJ</button>
      </div>
    </div>

    <!-- √âtape 1 : identit√© / background -->
    <div v-if="etape===1" class="bloc">
      <h2 class="h2">[1/5] Identit√©</h2>
      <div class="champs">
        <div style="grid-column: span 6;">
          <label>Nom</label>
          <input class="input" v-model="perso.nom" placeholder="Ex: Alia Cendrefeu" />
        </div>

        <div style="grid-column: span 3;">
          <label>Lign√©e (race)</label>
          <select class="input" v-model="perso.lignee" :disabled="backgroundLocked">
            <option value="Humain">Humain</option>
            <option value="Elfe">Elfe</option>
            <option value="Nain">Nain</option>
            <option value="Halfelin">Halfelin</option>
            <option value="Autre">Autre</option>
          </select>
        </div>

        <div style="grid-column: span 3;">
          <label>√Çge</label>
          <input class="input" type="number" v-model.number="perso.age" :disabled="backgroundLocked" />
        </div>

        <div style="grid-column: span 4;">
          <label>Alignement (indicatif)</label>
          <select class="input" v-model="perso.alignement" :disabled="backgroundLocked">
            <option>Neutre</option>
            <option>Loyal Bon</option>
            <option>Chaotique Bon</option>
            <option>Loyal Neutre</option>
            <option>Chaotique Neutre</option>
            <option>Loyal Mauvais</option>
            <option>Chaotique Mauvais</option>
          </select>
        </div>

        <div style="grid-column: span 8;">
          <label>Historique (background)</label>
          <div style="display:flex; gap:8px; align-items:center;">
            <select class="input" v-model="selectedBackgroundName" :disabled="backgroundLocked">
              <option value="">-- Aucun --</option>
              <option v-for="b in backgroundsOptions" :key="b.id" :value="b.name">{{ b.name }}</option>
            </select>
            <button class="btn" v-if="!backgroundLocked" @click="validerBackground">Valider</button>
            <button class="btn ghost" v-else @click="deverrouillerBackground">Modifier</button>
          </div>
        </div>
      </div>
    </div>

    <!-- √âtape 2 : Classe & progression -->
    <div v-else-if="etape===2" class="bloc">
      <h2 class="h2">[2/5] Classe & niveau</h2>
      <div class="champs">
        <div style="grid-column: span 4;">
          <label>Classe</label>
          <div style="display:flex; gap:8px; align-items:center;">
            <select class="input" v-model="selectedClassName" :disabled="classLocked">
              <option value="">-- Choisir une classe --</option>
              <option v-for="c in classesOptions" :key="c.id" :value="c.name">{{ c.name }}</option>
            </select>
            <button class="btn" v-if="!classLocked" @click="validerClasse">Valider</button>
            <button class="btn ghost" v-else @click="deverrouillerClasse">Modifier</button>
          </div>
        </div>

        <!-- NOTE: Le choix de sous-classe direct a √©t√© supprim√© de l'UI.
             La sous-classe est d√©sormais choisie via une feature 'subclass_choice'
             (d√©clench√©e par features_by_level). On affiche la sous-classe choisie en info. -->
        <div style="grid-column: span 4;">
          <label>Sous-classe (actuelle)</label>
          <input class="input" type="text" :value="perso.sousClasse || '‚Äî aucune ‚Äî'" disabled />
        </div>

        <div style="grid-column: span 4;">
          <label>Niveau</label>
          <input class="input" type="number" min="1" max="20" v-model.number="perso.niveau" :disabled="classLocked" />
        </div>

        <div style="grid-column: span 4;">
          <label>DV (d√© de vie)</label>
          <input class="input" type="number" :value="dvComputed" disabled />
        </div>

        <div style="grid-column: span 4;">
          <label>PV max (calcul√©)</label>
          <input class="input" type="number" :value="pvMaxComputed" disabled />
        </div>

        <div style="grid-column: span 4;">
          <label>PV actuels</label>
          <input class="input" type="number" :value="pvActuelsComputed" disabled />
        </div>
      </div>

      <!-- Indicateur de la classe charg√©e -->
      <div style="margin-top:10px;color:var(--texte-2)">
        <strong>Classe d√©tect√©e :</strong>
        <span v-if="classData">{{ classData.name || classData.raw?.name || classData.raw?.nom }}</span>
        <span v-else>aucune</span>

        <div v-if="(classData?.raw?.skill_choices) || (classData?.skill_choices)" style="margin-top:6px;">
          <small>
            Choisir
            {{ (classData?.raw?.skill_choices?.choose) || (classData?.skill_choices?.choose) || 0 }}
            comp√©tences parmi :
            {{ (classData?.raw?.skill_choices?.from ?? classData?.skill_choices?.from ?? []).join(', ') }}
          </small>
        </div>
      </div>

      <!-- BLOC: Choix sp√©cifiques √† la classe (comp√©tences & features enrichies) -->
      <div style="margin-top:14px; border-top:1px dashed var(--bord); padding-top:10px;">
        <h3 class="h3">Choix sp√©cifiques √† la classe</h3>

        <!-- Choix de comp√©tences (si la classe impose un choix) -->
        <div v-if="classSkillChoices" style="margin-top:8px;">
          <label><strong>Comp√©tences √† choisir</strong> ‚Äî Choisir {{ classSkillChoices.choose }} :</label>
          <div style="display:flex; gap:8px; flex-wrap:wrap; margin-top:6px;">
            <label v-for="s in classSkillChoices.from" :key="s" style="display:flex; align-items:center; gap:6px;">
              <input type="checkbox" :value="s" :checked="selectedSkills.includes(s)" @change="toggleSkillChoice(s)" :disabled="isSkillLocked" />
              <span>{{ s }}</span>
            </label>
          </div>
          <div style="margin-top:6px;">
            <small>{{ selectedSkills.length }} / {{ classSkillChoices.choose }} s√©lectionn√©(s)</small>
            <button class="btn" style="margin-left:8px;" @click="validerSkills" :disabled="selectedSkills.length !== classSkillChoices.choose || isSkillLocked">Valider les comp√©tences</button>
            <button class="btn ghost" v-if="isSkillLocked" @click="deverrouillerSkills">Modifier</button>
          </div>
        </div>

        <!-- Features enrichies (classe + sous-classe) -->
        <div v-if="enrichedAvailableFeatures.length" style="margin-top:12px;">
          <label><strong>Features disponibles (niveau ‚â§ {{ perso.niveau }})</strong></label>
          <ul style="margin-top:6px; padding-left:18px;">
            <li v-for="(f, idx) in enrichedAvailableFeatures" :key="f.id+idx" style="margin-bottom:8px;">
              <div style="display:flex; justify-content:space-between; align-items:center;">
                <div>
                  <strong>{{ f.displayName || f.id }}</strong>
                  <div style="color:var(--texte-2); font-size:12px;">{{ f.description || '' }}</div>
                </div>
                <div style="margin-left:12px;">
                  <!-- SPECIAL : feature qui d√©clenche le choix de sous-classe -->
                  <div v-if="f.id === 'subclass_choice' && !featureChoicesLocked[f.id]">
                    <small>Choix de sous-classe requis</small>
                    <div style="margin-top:6px;">
                      <button class="btn" @click="openSubclassChoiceModal(f.id)">Choisir la sous-classe</button>
                    </div>
                  </div>

                  <!-- Si la feature demande un choix multiple (choose/from) -->
                  <div v-else-if="f.choose && !featureChoicesLocked[f.id]">
                    <small>Choisir {{ f.choose }}</small>
                    <div style="display:flex; gap:6px; margin-top:6px;">
                      <label v-for="opt in (f.from||[])" :key="opt" style="display:flex; align-items:center; gap:6px;">
                        <input type="checkbox" :value="opt" :checked="(selectedFeatureChoices[f.id] || []).includes(opt)" @change="toggleFeatureChoice(f.id, opt, f.choose)" />
                        <span>{{ opt }}</span>
                      </label>
                    </div>
                    <div style="margin-top:6px;">
                      <button class="btn" @click="validerFeatureChoice(f.id)" :disabled="(selectedFeatureChoices[f.id]||[]).length !== f.choose">Valider</button>
                    </div>
                  </div>

                  <!-- Sinon feature automatique -->
                  <div v-else>
                    <small v-if="featureChoicesLocked[f.id]">Verrouill√©e ‚úì</small>
                    <small v-else>Automatique</small>
                  </div>
                </div>
              </div>
            </li>
          </ul>
        </div>

      </div>
      <!-- FIN bloc choix classe/features -->
    </div>

    <!-- √âtape 3 : caract√©ristiques -->
    <div v-else-if="etape===3" class="bloc">
      <h2 class="h2">[3/5] Caract√©ristiques</h2>
      <div class="ligne" style="gap:8px; margin-bottom:8px;">
        <button class="btn ghost" @click="generer('roll')">üé≤ Lancer 4d6 (garde 3)</button>
        <button class="btn ghost" @click="generer('array')">üìö R√©partition standard</button>
        <button class="btn ghost" @click="generer('buy')">üßÆ Point Buy (27)</button>
      </div>

      <div class="champs">
        <div v-for="(val, cle) in perso.caracs" :key="cle" style="grid-column: span 4;">
          <label style="display:flex; justify-content:space-between;">
            <span style="text-transform: capitalize;">{{ cle }}</span>
            <small class="badge">mod {{ modificateur(cle) >= 0 ? '+' : '' }}{{ modificateur(cle) }}</small>
          </label>
          <input class="input" type="number" v-model.number="perso.caracs[cle]" :disabled="false" />
        </div>
      </div>
      <p style="margin-top:8px; color:var(--texte-2);">Rappel : mod = ‚åä(score ‚àí 10) / 2‚åã</p>
    </div>

    <!-- √âtape 4 : comp√©tences / √©quipement -->
    <div v-else-if="etape===4" class="bloc">
      <h2 class="h2">[4/5] Comp√©tences, sauvegardes, √©quipement de base</h2>
      <div class="champs">
        <div style="grid-column: span 4;">
          <label>Bonus de ma√Ætrise</label>
          <input class="input" type="number" :value="bonusMaitrise" disabled />
        </div>
        <div style="grid-column: span 4;">
          <label>Classe d'armure (CA)</label>
          <input class="input" type="number" :value="classeArmure" disabled />
        </div>
        <div style="grid-column: span 4;">
          <label>Initiative</label>
          <input class="input" type="number" :value="initiative" disabled />
        </div>
      </div>

      <details style="margin-top:10px;">
        <summary>Proficiences (cocher ma√Ætrises)</summary>
        <table class="table" style="margin-top:8px;">
          <thead>
            <tr><th>Comp√©tence</th><th>Carac</th><th>Ma√Ætrise ?</th><th>Total</th></tr>
          </thead>
          <tbody>
            <tr v-for="c in competencesDef" :key="c.id">
              <td>{{ c.nom }}</td>
              <td>{{ c.carac.toUpperCase() }}</td>
              <td><input type="checkbox" v-model="perso.competences[c.id]" :disabled="classLocked && !perso.competences[c.id]" /></td>
              <td>{{ scoreCompetence(c) >= 0 ? '+' : '' }}{{ scoreCompetence(c) }}</td>
            </tr>
          </tbody>
        </table>
      </details>

      <div class="champs" style="margin-top:10px;">
        <div style="grid-column: span 6;">
          <label>Langues</label>
          <select class="input" v-model="perso.langues" :disabled="backgroundLocked">
            <option v-for="l in languesOptions" :key="l.id" :value="l.name">{{ l.name }}</option>
          </select>
        </div>

        <div style="grid-column: span 6;">
          <label>√âquipement de d√©part (armes disponibles selon ma√Ætrises)</label>
          <select class="input" v-model="equipementModel" multiple :disabled="classLocked && !armesOptionsFiltered.length">
            <option v-for="it in armesOptionsFiltered" :key="it.id" :value="it.name" :title="it.raw?.description || it.description || ''">
              {{ it.name + ' (' + (it.weaponType || 'inconnu') + ')' }}
            </option>
          </select>
        </div>
      </div>

      <details style="margin-top:10px;">
        <summary>Monture / Cr√©ature apprivois√©e (r√®gle maison)</summary>
        <div class="champs" style="margin-top:8px;">
          <div style="grid-column: span 6;">
            <label>Nom monture/cr√©ature</label>
            <input class="input" v-model="perso.monture.nom" placeholder="Ex: Havane (cheval)" :disabled="false" />
          </div>
          <div style="grid-column: span 3;">
            <label>Vitesse</label>
            <input class="input" v-model="perso.monture.vitesse" placeholder="Ex: 60 ft. (/12 m)" :disabled="false" />
          </div>
          <div style="grid-column: span 3;">
            <label>Notes</label>
            <input class="input" v-model="perso.monture.notes" placeholder="Charge, dressage‚Ä¶" :disabled="false" />
          </div>
        </div>
      </details>
    </div>

    <!-- √âtape 5 : r√©sum√© -->
    <div v-else class="bloc">
      <h2 class="h2">[5/5] R√©sum√©</h2>
      <FichePersonnage :compact="true" />
      <div style="margin-top:10px; display:flex; gap:8px;">
        <button class="btn ghost" @click="editerJSON">Voir JSON</button>
        <button class="btn" @click="telechargerJSON">T√©l√©charger JSON</button>
      </div>
    </div>

    <!-- MODAL pour choix sous-classe (ouvert par feature 'subclass_choice') -->
    <div v-if="subclassChoiceModal.opened" class="bw-modal" @click.self="subclassChoiceModal.opened=false">
      <div class="card">
        <h3>Choisir une sous-classe</h3>
        <div class="list">
          <label v-for="s in subclassesFiltered" :key="s.id">
            <input type="radio" name="subclass_choice" :value="s.name" v-model="subclassChoiceSelection" />
            <strong style="margin-left:6px">{{ s.name }}</strong>
            <div style="font-size:12px; color:var(--texte-2)">{{ s.raw?.description || s.raw?.texte || '' }}</div>
          </label>
        </div>
        <div style="display:flex; gap:8px; justify-content:flex-end; margin-top:12px;">
          <button class="btn ghost" @click="subclassChoiceModal.opened=false">Annuler</button>
          <button class="btn" @click="confirmSubclassChoice">Confirmer</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
// Small compatibility shim for BonomeWizard.vue -- defines variables/functions the template expects.
// Paste this <script> content into your BonomeWizard.vue <script setup> section (replace existing script).
// It is UI-side only and delegates heavy work to server endpoints:
//  - GET  /api/creation/surface
//  - POST /api/creation/preview
//
// It defines commonly referenced refs to avoid "property accessed during render but not defined" warnings
// and provides stubs for functions that the template may call. Adjust as needed.

import { ref, reactive, onMounted } from 'vue';

const etape = ref(1); // current wizard step (1..n)
function suivant() { etape.value = Math.min((etape.value||1)+1, 99); }
function precedent() { etape.value = Math.max((etape.value||1)-1, 1); }
function setEtape(n:number){ etape.value = n; }

// modal for subclass / feature choices expected by the template
const subclassChoiceModal = reactive({
  opened: false,
  payload: null as any
});
function openSubclassModal(payload?: any){
  subclassChoiceModal.payload = payload ?? null;
  subclassChoiceModal.opened = true;
}
function closeSubclassModal(){
  subclassChoiceModal.opened = false;
  subclassChoiceModal.payload = null;
}

// main UI state
const loading = ref(false);
const error = ref<string|null>(null);
const preview = ref<any>(null);
const appliedFeatures = ref<string[]>([]);
const pendingChoices = ref<any[]>([]);

// selection & baseCharacter objects used for preview requests
const selection = reactive({
  race: null as string|null,
  subrace: null as string|null,
  class: null as string|null,
  subclass: null as string|null,
  background: null as string|null,
  manual_features: [] as string[],
  chosenOptions: {} as Record<string, any>
});

const baseCharacter = reactive({
  base_stats_before_race: {
    strength: 8,
    dexterity: 14,
    constitution: 12,
    intelligence: 16,
    wisdom: 10,
    charisma: 11
  }
});

// options for selects (races, classes, backgrounds)
const options = reactive({
  races: [] as Array<{id:string, nom?:string}>,
  classes: [] as Array<{id:string, nom?:string}>,
  backgrounds: [] as Array<{id:string, nom?:string}>
});

// simple local helpers the template may use
function telechargerJSON(obj:any, filename='export.json'){
  try {
    const data = JSON.stringify(obj, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = filename;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  } catch(e){
    console.warn('telechargerJSON failed', e);
  }
}

function scoreCompetence(ability:string){
  // small helper: derive mod from baseCharacter (if present)
  const stats = baseCharacter.base_stats_before_race || {};
  const v = stats[ability] ?? 10;
  return Math.floor((v - 10) / 2);
}

// API calls
async function fetchCreationSurface(){
  loading.value = true;
  error.value = null;
  try {
    const res:any = await $fetch('/api/creation/surface', { method: 'GET' });
    options.races = res.races || [];
    options.classes = res.classes || [];
    options.backgrounds = res.backgrounds || [];
  } catch(e:any){
    // non-fatal: the UI can still work with manual inputs
    error.value = e?.message || 'Impossible de charger les options (surface)';
  } finally {
    loading.value = false;
  }
}

async function requestPreview(){
  loading.value = true;
  error.value = null;
  preview.value = null;
  appliedFeatures.value = [];
  pendingChoices.value = [];
  try {
    const body = {
      selection: {
        race: selection.race,
        subrace: selection.subrace,
        class: selection.class,
        subclass: selection.subclass,
        background: selection.background,
        manual_features: selection.manual_features,
        chosenOptions: selection.chosenOptions
      },
      baseCharacter: { base_stats_before_race: baseCharacter.base_stats_before_race }
    };
    const res:any = await $fetch('/api/creation/preview', { method: 'POST', body });
    if (!res) throw new Error('No response from server');
    if (res.ok === false) {
      error.value = res.error || (res.errors && JSON.stringify(res.errors)) || 'Erreur serveur lors de la pr√©visualisation';
      return;
    }
    preview.value = res.previewCharacter || null;
    appliedFeatures.value = res.appliedFeatures || [];
    pendingChoices.value = res.pendingChoices || [];
    // if pending choices exist, open modal or let template handle display using pendingChoices
    if (pendingChoices.value.length) {
      // open a generic modal if template expects it
      openSubclassModal({ title: 'Choix requis', items: pendingChoices.value });
    }
  } catch(e:any){
    console.error('requestPreview', e);
    error.value = e?.message || String(e);
  } finally {
    loading.value = false;
  }
}

// When a pending choice is resolved in the UI, call this to update selection and re-preview
async function handleResolvePendingChoice(choice:any, chosenValue:any){
  const uiId = choice.ui_id || choice.id || `choice_${Math.random().toString(36).slice(2,8)}`;
  selection.chosenOptions[uiId] = chosenValue;
  // close modal if open
  closeSubclassModal();
  // re-request preview
  await requestPreview();
}

// stubs for functions used in templates
function validerClasse(){ return requestPreview(); }
function validerBackground(){ return requestPreview(); }
function validerSkills(){ return requestPreview(); }
function validerFeatureChoice(){ return requestPreview(); }

function generer(method:string){
  // method: 'roll' | 'array' | 'buy' etc.
  // simple roll 4d6 drop lowest implementation (if method === 'roll')
  if(method === 'roll'){
    const rollStat = () => {
      const rolls = Array.from({length:4}, ()=> Math.floor(Math.random()*6)+1).sort((a,b)=>a-b);
      return rolls[1]+rolls[2]+rolls[3];
    };
    baseCharacter.base_stats_before_race.strength = rollStat();
    baseCharacter.base_stats_before_race.dexterity = rollStat();
    baseCharacter.base_stats_before_race.constitution = rollStat();
    baseCharacter.base_stats_before_race.intelligence = rollStat();
    baseCharacter.base_stats_before_race.wisdom = rollStat();
    baseCharacter.base_stats_before_race.charisma = rollStat();
  }
}

// save / commit stub (to be wired to your store or API)
async function sauvegarder(){
  console.log('sauvegarder stub', preview.value || selection);
  // implement persistence: call /api/creation/commit or use your store
}

// expose variables for template (script setup exposes top-level bindings)
onMounted(()=>{
  // attempt to load surface options on mount
  fetchCreationSurface().catch(()=>{});
});
</script>

<style scoped>
/* Conteneur bloc */
.bloc{ border:1px solid var(--bord); border-radius:12px; padding:12px; background:var(--fond, #0b1225); }
/* Labels */
label{ display:block; font-size:12px; color:var(--texte-2); margin-bottom:6px; }
/* Inputs et selects */
input.input, select.input { width:100%; padding:8px; border-radius:6px; border:1px solid rgba(255,255,255,0.06); background:transparent; color:var(--texte, #e6eefc); }
/* Assurer la visibilit√© des options (selon navigateur) */
select.input option { color: var(--texte, #e6eefc) !important; background: transparent; }
/* Badges */
.badge{ background: rgba(255,255,255,0.06); padding:2px 6px; border-radius:8px; font-size:11px; }
/* Table */
.table{ width:100%; border-collapse:collapse; }
.table th, .table td{ padding:6px 8px; border-bottom:1px solid rgba(255,255,255,0.03); color:var(--texte); }

/* Modal simple pour choix sous-classe */
.bw-modal {
  position: fixed;
  inset: 0;
  display:flex;
  align-items:center;
  justify-content:center;
  background: rgba(0,0,0,0.5);
  z-index: 9999;
}
.bw-modal .card {
  background: var(--fond, #0b1225);
  padding: 16px;
  border-radius: 10px;
  width: 90%;
  max-width: 720px;
  color: var(--texte, #e6eefc);
  box-shadow: 0 6px 24px rgba(0,0,0,0.6);
}
.bw-modal .list { max-height: 60vh; overflow:auto; margin-top:8px; }
.bw-modal .list label { display:flex; align-items:center; gap:8px; padding:6px 0; }
</style>
